{"version":3,"sources":["components/Header.js","components/BottakuriVoiceCard.js","components/App.js","serviceWorker.js","reducers/index.js","index.js"],"names":["useStyles","makeStyles","theme","heroContent","padding","spacing","Header","classes","AppBar","position","Toolbar","Typography","variant","color","noWrap","className","Container","maxWidth","TextField","id","label","type","fullWidth","card","height","display","flexDirection","cardMedia","paddingTop","cardContent","flexGrow","textAlign","BottakuriVoiceCard","data","Grid","item","key","xs","sm","md","Card","CardMedia","image","title","CardContent","GridList","cellHeight","cols","GridListTile","style","Fab","aria-label","component","cardGrid","paddingBottom","footer","backgroundColor","palette","background","paper","cards","Boolean","window","location","hostname","match","initialState","store","createStore","state","action","ReactDOM","render","Fragment","container","map","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.6ca81971.chunk.js","sourcesContent":["import React from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport AppBar from '@material-ui/core/AppBar';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport Typography from '@material-ui/core/Typography';\nimport Container from '@material-ui/core/Container';\nimport TextField from '@material-ui/core/TextField';\n\nconst useStyles = makeStyles(theme => ({\n  heroContent: {\n    padding: theme.spacing(3, 0, 0),\n  },\n}));\n\nexport default function Header() {\n  const classes = useStyles();\n\n  return (\n    <header>\n        <AppBar position=\"relative\">\n          <Toolbar>\n            <Typography variant=\"h6\" color=\"inherit\" noWrap>\n              ぼったくりガードWEB\n            </Typography>\n          </Toolbar>\n        </AppBar>\n        <div className={classes.heroContent}>\n          <Container maxWidth=\"md\">\n            <TextField id=\"outlined-search\" label=\"検索\" type=\"search\" variant=\"outlined\" fullWidth />\n          </Container>\n        </div>\n      </header>\n  );\n}","import React from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Card from '@material-ui/core/Card';\nimport CardContent from '@material-ui/core/CardContent';\nimport CardMedia from '@material-ui/core/CardMedia';\nimport Grid from '@material-ui/core/Grid';\nimport Typography from '@material-ui/core/Typography';\nimport Fab from '@material-ui/core/Fab';\nimport PlayArrowIcon from '@material-ui/icons/PlayArrow';\nimport GridList from '@material-ui/core/GridList';\nimport GridListTile from '@material-ui/core/GridListTile';\n\nconst useStyles = makeStyles(theme => ({\n  card: {\n    height: '100%',\n    display: 'flex',\n    flexDirection: 'column',\n  },\n  cardMedia: {\n    paddingTop: '56.25%', // 16:9\n  },\n  cardContent: {\n    flexGrow: 1,\n    textAlign: \"-webkit-right\"\n  },\n}));\n\nexport default function BottakuriVoiceCard(data) {\n  const classes = useStyles();\n\n  return (\n    <Grid item key={data.card} xs={12} sm={6} md={4}>\n      <Card className={classes.card}>\n        <CardMedia\n          className={classes.cardMedia}\n          image=\"https://source.unsplash.com/random\"\n          title=\"Image title\"\n        />\n        <CardContent className={classes.cardContent}>\n          <GridList cellHeight={100} cols={6}>\n            <GridListTile cols={2} style={{textAlign: \"center\"}}>\n              <Fab color=\"primary\" aria-label=\"start\">\n                <PlayArrowIcon />\n              </Fab>\n            </GridListTile>\n            <GridListTile cols={4}>\n              <Typography>\n                YYYY/MM/DD\n              </Typography>\n              <Typography variant=\"h5\" component=\"h2\" style={{textAlign: \"left\"}}>\n                位置情報 {data.card}\n              </Typography>\n              <Typography  style={{textAlign: \"initial\"}}>\n                位置情報位置情報位置情報位置情報位置情報位置情報\n              </Typography>\n            </GridListTile>\n          </GridList>\n        </CardContent>\n      </Card>\n    </Grid>\n  );\n}","import React from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Header from './Header';\nimport BottakuriVoiceCard from './BottakuriVoiceCard';\nimport Grid from '@material-ui/core/Grid';\nimport Container from '@material-ui/core/Container';\n\nconst useStyles = makeStyles(theme => ({\n  heroContent: {\n    padding: theme.spacing(3, 0, 0),\n  },\n  cardGrid: {\n    paddingTop: theme.spacing(8),\n    paddingBottom: theme.spacing(8),\n  },\n  card: {\n    height: '100%',\n    display: 'flex',\n    flexDirection: 'column',\n  },\n  cardMedia: {\n    paddingTop: '56.25%', // 16:9\n  },\n  cardContent: {\n    flexGrow: 1,\n    textAlign: \"-webkit-right\"\n  },\n  footer: {\n    backgroundColor: theme.palette.background.paper,\n    padding: theme.spacing(6),\n  },\n}));\n\nconst cards = [1, 2, 3, 4, 5, 6, 7, 8, 9];\n\nexport default function App() {\n  const classes = useStyles();\n\n  return (\n    <React.Fragment>\n      <Header />\n      <main>\n        <Container className={classes.cardGrid} maxWidth=\"md\">\n          <Grid container spacing={4}>\n            {cards.map(card => (\n              <BottakuriVoiceCard {...{card: card}} />\n            ))}\n          </Grid>\n        </Container>\n      </main>\n    </React.Fragment>\n  );\n}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","const initialState = {\n}\n\nexport default function index(state = initialState, action) {\n    switch(action.type) {\n        default:\n            return state\n    }\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\nimport reducer from './reducers/index';\nimport { createStore } from 'redux'\nimport { Provider } from 'react-redux'\n\nconst store = createStore(reducer);\n\nReactDOM.render( <Provider store={store}><App /></Provider>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}